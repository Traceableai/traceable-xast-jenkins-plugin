Metadata-Version: 2.1
Name: traceablecli
Version: 0.1.322
Summary: Traceable CLI
Home-page: https://traceable.ai
Author: Traceable.ai
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE

## About
**traceable**: Traceable API Security Testing Enablement

## Installation
Traceable **traceable** is available on PyPI:
```
python3 -m pip install traceable --prefix=./
```

## Config Management
The config dir is by default `$HOME/.traceable/` or can be set by environment variable `TRACEABLE_HOME`.

```
.traceable/
  │   config.yaml # All custom configuration needs to go in this.
  │   default.yaml # Default configs and plugins. Downloaded on login to platform from cli. Do not modify.
  └───plugins/
  |   └───custom/ # Custom plugins
  |       └───csrfvalidation.py
  └───hooks/ # Hooks for custom code insertion in plugin logic. Can be used pre/post attack
  |    └───login.py
  |    └───csrf.py
  └───data/ # Data directory of scans
```

- **data:** The fist subdirectory is named with the scan ID, and it contains a file for each test downloaded from the platform
- **plugins:** Each plugin file can be imported to create pre hooks and post hooks that affects tests mutations and assertions

## User Configuration File
For more options look for examples folder

**Minimal Config**
```yaml # config.yaml
# traceable_server is used to run scans using SaaS or on-prem environments
traceable_server: api.traceable.ai:443
token: <token here>
```

**Adding custom plugins**

Write your own custom plugin refering the examples in the examples folder.
Add the name atrribute of your custom plugin here. All plugin names are preferred to be in lowercase.

```
traceable_server: api.traceable.ai:443
token: <token>
scan:
  plugins:
    custom:
      disabled: false
      csrfvalidation: {}
```
## Usage
**traceable**
```
Usage: traceable [OPTIONS] COMMAND [ARGS]...

Options:
  --logfile TEXT  File to output logs, by default TRACEABLE outputs to stdout
  --help          Show this message and exit.

Commands:
  login    login to Traceable and download TRACEABLE configurations
  plugins  List available plugins
  scan     Scanning commands
  version  Show version
```

**traceable scan**
```
Usage: traceable scan [OPTIONS] COMMAND [ARGS]...

  Scanning commands

Options:
  --help  Show this message and exit.

Commands:
  abort         aborts a scan
  init          initializes a new scan
  initAndRun  initializes a new scan and runs it
  list          list active scans
  show          show scan
  run         run an initialized scan
  stop          stops a scan
```

**traceable scan initAndRun**
```
Usage: traceable scan initAndRun [OPTIONS]

Options:
  -n, --scan_name TEXT            name of the scan  [default:
                                  (scan_2022-07-19T11:59:29)]
  -st, --scan_tag TEXT            Tags for the scan, Eg: buildId=123
                                  [default: ([])]
  -t, --traffic_env TEXT          traffic environment to use  [default: (ast)]
  -r, --reference_env TEXT        reference environment use learnings from
                                  [default: ()]
  -i, --include_url_regex TEXT    include urls matching this regex  [default:
                                  (.*)]
  -e, --exclude_url_regex TEXT    exclude urls matching this regex  [default:
                                  (.*logout.*)]
  -u, --target_url TEXT           Override the domain with this url  [default:
                                  (); required]
  -l, --loglevel [NOTSET|DEBUG|INFO|WARNING|ERROR|CRITICAL|TRACE]
  -f, --config_file TEXT
  -bi, --build_id TEXT            Build ID  [default: ()]
  -bu, --build_url TEXT           Build URL  [default: ()]
  --exclude-plugins TEXT          exclude the specified plugins, list
                                  available plugins using "traceable plugins"
  --plugins TEXT                  only run the specified plugins, list
                                  available plugins using "traceable plugins"
  --idle-timeout INTEGER          IDLE timeout for the scan in minutes
  --scan-timeout INTEGER          Scan timeout for the platform in minutes
  --token TEXT                    token for the scan. Will be picked from
                                  config file or ENV if not specified
  --help                          Show this message and exit.
  ```


### Examples

**login**

Once you login, cli will download all plugin configurations.

```
./traceable/bin/traceable login
TRACEABLE - Traceable Application Security Testing Enablement
Token: <Input token here>
[2022-07-20 16:53:12,882]: INFO: Setting log level to: INFO
[2022-07-20 16:53:12,883]: INFO: Check local config directory (/home/ubuntu/.traceable)...
[2022-07-20 16:53:12,883]: INFO: Directories plugins/custom created in /home/ubuntu/.traceable
[2022-07-20 16:53:12,883]: INFO: Directories hooks created in /home/ubuntu/.traceable
[2022-07-20 16:53:12,884]: INFO: Testing connection to Traceable (api.traceable.ai:443)...
[2022-07-20 16:53:12,884]: INFO: Connection ok
[2022-07-20 16:53:12,884]: INFO: Downloading configurations...
...
```

**Run the scan.**
```
./traceable/bin/traceable scan initAndRun --traffic_env "ast"
TRACEABLE - Traceable Application Security Testing Enablement
[2022-07-20 16:58:19,957]: INFO: Initializing config from /home/ubuntu/.traceable
[2022-07-20 16:58:19,963]: INFO: Default config loaded from /home/ubuntu/.traceable/default.yaml
[2022-07-20 16:58:20,161]: INFO: Loading hooks from /home/ubuntu/.traceable/hooks
[2022-07-20 16:58:20,162]: INFO: Loaded 2 hooks definition: defaults_crapi_login_posthook, defaults_crapi_login_prehook
[2022-07-20 16:58:20,162]: INFO: Loading custom plugins from /home/ubuntu/.traceable/plugins/custom
[2022-07-20 16:58:21,438]: INFO: Scan initialized with ID: 9a96b3dd-fc24-4e7f-9abd-6575fd95290c, Name: scan_2022-07-20T16:58:20 and status: SCAN_STATE_INITIALIZED
[2022-07-20 21:35:11,182]: INFO: Scan running
[2022-07-20 21:35:11,182]: INFO: Preparing to receive test suites...
...
```

Now send some traffic to your instrumented traceable application on the traffic_env and traceable will take care of finding vulnerabilities for you.
